{"version":3,"sources":["axios-orders.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","putToDB","list","put","props","day","then","responce","console","log","catch","error","addTask","state","title","trim","task","value","complete","newList","setState","allTasksCount","length","doneTasksCount","get","defaults","this","response","data","filter","i","newDoneTasksCount","splice","currentTask","listLi","map","el","style","textDecoration","color","key","onAuxClick","removeTask","onClick","markAsDoneTask","margin","class","type","placeholder","onChange","e","changeTitle","target","float","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","oncontextmenu","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59c93ff7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://react-to-do-edc2d.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import React from 'react';\r\nimport axios from '../axios-orders';\r\nimport { Button } from 'reactstrap';\r\n\r\nexport default class extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            list: [],\r\n            title: '',\r\n            allTasksCount: 0,\r\n            doneTasksCount: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`${axios.defaults.baseURL}${this.props.day}.json`)\r\n            .then(response => {\r\n                if (response.data === null) {\r\n                    this.setState({\r\n                        list: [],\r\n                        allTasksCount: 0,\r\n                        doneTasksCount: 0\r\n                    });\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        list: response.data,\r\n                        allTasksCount: response.data.length,\r\n                        doneTasksCount: response.data.filter(i => i.complete === true).length\r\n                    });\r\n                }\r\n\r\n\r\n            });\r\n\r\n    }\r\n\r\n    changeTitle(title) {\r\n        this.setState({ title });\r\n    }\r\n\r\n    putToDB = (list) => {\r\n        axios.put(`/${this.props.day}.json`, list)\r\n            .then(responce => console.log(responce))\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    addTask = () => {\r\n        if (this.state.title.trim() !== '') {\r\n\r\n            const task = {\r\n                value: this.state.title,\r\n                complete: false\r\n            }\r\n\r\n            let newList = [...this.state.list, task];\r\n\r\n            this.setState({\r\n                list: newList,\r\n                allTasksCount: newList.length,\r\n                title: '',\r\n            });\r\n\r\n            this.putToDB(newList);\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    removeTask(i) {\r\n        let newList = [...this.state.list];\r\n        let newDoneTasksCount = this.state.doneTasksCount;\r\n\r\n        let removingTask = newList[i];\r\n        if (removingTask.complete === true) {\r\n            newDoneTasksCount--;\r\n        }\r\n\r\n        newList.splice(i, 1);\r\n\r\n        this.setState({\r\n            list: newList,\r\n            doneTasksCount: newDoneTasksCount,\r\n            allTasksCount: newList.length,\r\n        });\r\n\r\n        this.putToDB(newList);\r\n    }\r\n\r\n    markAsDoneTask(i) {\r\n        let newList = [...this.state.list];\r\n        let currentTask = newList[i];\r\n        let newDoneTasksCount = this.state.doneTasksCount;\r\n\r\n        if (currentTask.complete === false) {\r\n\r\n            currentTask.complete = true;\r\n            newDoneTasksCount++;\r\n        }\r\n        else {\r\n            currentTask.complete = false;\r\n            newDoneTasksCount--;\r\n        }\r\n\r\n        newList.splice(i, 1, currentTask);\r\n\r\n        this.setState({\r\n            list: newList,\r\n            doneTasksCount: newDoneTasksCount,\r\n        });\r\n\r\n        this.putToDB(newList);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let listLi = this.state.list.map((el, i) => {\r\n            return <li\r\n                style={{\r\n                    textDecoration: el.complete ? 'line-through' : '',\r\n                    color: el.complete ? '#ABB8C3' : ''\r\n                }}\r\n                key={i}\r\n                onAuxClick={() => this.removeTask(i)}\r\n                onClick={() => this.markAsDoneTask(i)}>\r\n                {el.value}\r\n            </li>\r\n        });\r\n\r\n        return (\r\n            <div style={{ margin: 10 }}>\r\n                <p>{this.props.day}</p>\r\n                <p>Progress: {this.state.doneTasksCount} / {this.state.allTasksCount}</p>\r\n                <div class=\"row\">\r\n\r\n                    <div class=\"input-group mb-3\">\r\n                        <input type='text'\r\n                        class=\"form-control\"\r\n                        placeholder=\"Задачка\"\r\n                        value={this.state.title} onChange={(e) => this.changeTitle(e.target.value)} />\r\n                        <div class=\"input-group-append\">\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"btn btn-outline-success\"\r\n                                onClick={this.addTask}\r\n                                style={{ float: \"right\" }}>Dobavit'</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <ul>\r\n                        {listLi}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\nimport Todo from './components/Todo';\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\" class=\"container\">\n      <div class=\"row justify-content-around\" >\n      <div class=\"col-sm-3\">\n        <Todo day='Monday'></Todo>\n      </div>\n      <div class=\"col-sm-3\">\n        <Todo day='Tuesday'></Todo>\n      </div>\n      <div class=\"col-sm-3\">\n        <Todo day='Wednesday'></Todo>\n      </div>\n      <div class=\"col-sm-3\">\n        <Todo day='Thursday'></Todo>\n      </div>\n      <div class=\"col-sm-3\">\n        <Todo day='Friday'></Todo>\n      </div>\n      <div class=\"col-sm-3\">\n        <Todo day='Saturday'></Todo>\n      </div>\n      <div class=\"col-sm-3\">\n        <Todo day='Sunday'></Todo>\n      </div>\n      </div>\n\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'), document.oncontextmenu = () => false);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}